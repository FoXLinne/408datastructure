// MST 边的权值和最小的生成树称为最小生成树
// 只有连通图才有生成树，非连通图只有生成森林

// Prim 算法
// 从某一个顶点开始构建生成树，
// 每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止。

//Kruskal 算法
// 先挑选一条最小的边，使边的两头相连（原本已经连通顶点的边不选），
// 然后在剩下的边中挑选一条最小的边，使边的两头相连，直到所有顶点都连通为止。

// Prim 算法的时间复杂度 = O(|V|^2) 与顶点数有关，
// Kruskal 算法的时间复杂度 = O(|E|log^2|E|)，与边数有关，
// Prim 算法适合稠密图，Kruskal 算法适合稀疏图。

// Prim 算法的实现：
// 使用 isJoin[] 数组标记顶点是否已加入生成树，
// 使用 lowCost[] 数组标记顶点到生成树的最小权值，
// 第一轮，循环遍历所有结点，找到 lowCost[] 中最小的且未加入生成树的结点，
// 再次循环遍历所有结点，更新还没加入结点到数的 lowCost[]。
// 从 V0 开始，总共需要处理 n-1 轮，每一轮的时间复杂度为 O(n)。

// kruskal 算法的实现：
// 将所有边按权值从小到大排序，使用 weight 记录权值，Vertex1 和 Vertex2 记录边的两个顶点。
// 第一轮，检查第一条边的两个顶点是否已经连通，不连通则连起来。
// 从 E0 开始，总共需要处理 E 轮，每轮需要 O(log^2(E)) 的时间复杂度.
